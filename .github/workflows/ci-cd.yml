name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      python-version:
        description: "Python version to test with"
        required: false
        default: "3.11"
        type: choice
        options:
          - "3.11"
          - "3.12"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Prevent any tools from defaulting to version 3.1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  # Ensure Python is the primary runtime
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.11"] # Focus on most widely used version

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - name: Validate Python version
        run: |
          if [[ "${{ matrix.python-version }}" == "3.1" ]]; then
            echo "❌ ERROR: Python 3.1 is not available in GitHub Actions runners!"
            echo "Available versions: 3.9, 3.10, 3.11, 3.12+"
            echo "Please check compatible.json for supported versions."
            exit 1
          fi
          echo "✅ Using supported Python version: ${{ matrix.python-version }}"

      - name: Prevent .NET installation
        run: |
          # Block any attempts to install .NET Core 3.1
          echo "Blocking .NET Core 3.1 installation attempts..."
          sudo mkdir -p /usr/share/dotnet
          sudo touch /usr/share/dotnet/.version-3.1-blocked

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
        # Safeguard: Fail if someone tries to use unsupported Python 3.1
        if: matrix.python-version != '3.1'

      - name: Verify Python version
        run: |
          python --version
          python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')"
          # Ensure no .NET or other tools try to use version 3.1
          echo "Verifying no conflicting tool versions..."
          which dotnet || echo "No .NET found (expected)"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Lint with flake8
        run: |
          flake8 escai_framework tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 escai_framework tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          mypy escai_framework

      - name: Security check with bandit
        run: |
          bandit -r escai_framework

      

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://root:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest tests/unit/ -v --cov=escai_framework --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://root:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        run: |
          pytest tests/integration/ -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-22.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          helm upgrade --install escai-staging ./helm/escai \
            --namespace escai-staging \
            --create-namespace \
            --set escai.image.tag=${{ github.sha }} \
            --set escai.ingress.hosts[0].host=staging-api.escai.example.com \
            --values ./helm/escai/values-staging.yaml

  deploy-production:
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to production
        run: |
          helm upgrade --install escai ./helm/escai \
            --namespace escai \
            --create-namespace \
            --set escai.image.tag=${{ github.ref_name }} \
            --values ./helm/escai/values-production.yaml

  security-scan:
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata for scan
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
